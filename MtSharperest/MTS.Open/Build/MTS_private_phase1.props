<?xml version="1.0" encoding="utf-8"?>

<Project ToolsVersion="4.0" DefaultTargets="MTSIntegrityChecks" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<!--==========================================================================-->
	<!-- PHASE 1 -->
	<!-- The stuff in this file needs to happen BEFORE Microsoft.Cpp.Default.props and Microsoft.Cpp.props are imported -->
	<!--==========================================================================-->

	<!-- FIX MSBUILD -->
	<PropertyGroup Label="Globals">
		<!-- warning MSB8027: Two or more files with the name of X.cpp will produce outputs to the same location. This can lead to an incorrect build result. -->
		<IgnoreWarnCompileDuplicatedFilename>true</IgnoreWarnCompileDuplicatedFilename>

		<!-- Well, I'm not supporting vs2010 anymore, but it was a good VS version. this will make sure we can detect it and function OK if we need to -->
		<!-- http://sedodream.com/PermaLink,guid,a5894bad-f2a1-441a-a5b2-74f16c6cf8aa.aspx -->
		<VisualStudioVersion Condition="'$(VisualStudioVersion)' == ''">10.0</VisualStudioVersion>

		<!-- Toolset must be changed early on......... I dont know why............ (edit: must it?)-->
		<!-- Let's just choose whatever toolset would be included with the VS version we're running -->
		<PlatformToolset Condition="'$(VisualStudioVersion)' == '14.0'">v140</PlatformToolset>
		<PlatformToolset Condition="'$(VisualStudioVersion)' == '15.0'">v141</PlatformToolset>

	</PropertyGroup>
	
	<!-- MSVC gets angry if this isn't set (for me, editing vcxproj properties in IDE breaks; others may have other problems) -->
	<!-- see https://developercommunity.visualstudio.com/content/problem/140294/windowstargetplatformversion-makes-it-impossible-t.html -->
	<!-- Setting these has the annoying side effect of making msvc edit the value in the vcxproj whenever we edit anything else. nothing seems to be capable of preventing that -->
	<PropertyGroup Condition="'$(WindowsTargetPlatformVersion)'==''" Label="Globals">
		<!-- <WindowsTargetPlatformVersion>8.1</WindowsTargetPlatformVersion> -->
			<LatestTargetPlatformVersion>$([Microsoft.Build.Utilities.ToolLocationHelper]::GetLatestSDKTargetPlatformVersion('Windows', '10.0'))</LatestTargetPlatformVersion>
			<WindowsTargetPlatformVersion Condition="'$(WindowsTargetPlatformVersion)' == ''">$(LatestTargetPlatformVersion)</WindowsTargetPlatformVersion>
			<TargetPlatformVersion>$(WindowsTargetPlatformVersion)</TargetPlatformVersion>
	</PropertyGroup>

	<!-- Calculate root directory for all operations -->
	<PropertyGroup Label="Globals">
		<M_PackagesDir>$(MSBuildThisFileDirectory)../../../../</M_PackagesDir>
	</PropertyGroup>
	
	<!-- Find out which platforms are available. Well, this is an example of that. I don't think it's needed. -->
	<PropertyGroup Label="Globals">
		<M_Has_Switch Condition="Exists('$(M_PackagesDir)/Motherload.Switch')">true</M_Has_Switch>
		<M_Has_PS4 Condition="Exists('$(M_PackagesDir)/Motherload.PS4')">true</M_Has_PS4>
	</PropertyGroup>
	

	<PropertyGroup Label="Globals">
		<M_VcxprojPropsPath>$(MSBuildProjectDirectory)\$(MSBuildProjectName).props</M_VcxprojPropsPath>
		<M_BrutedPropsPath>$(SolutionDir)\$(SolutionName).props</M_BrutedPropsPath>
	</PropertyGroup>
	
	<!-- bruted projects include only M_BrutedPropsPath; native projects include M_VcxprojPropsPath as well-->
	<!-- This needs to be done EARLY... so we can find out what platform we are from the M_BrutedPropsPath -->
	<!-- If the vcxproj props files need to do anything sneaky to msbuild internals, we will need to manage that process ourselves or add yet another props file (phase1 and phase2 distinction -->
	<Import Condition="Exists('$(M_BrutedPropsPath)')" Project="$(M_BrutedPropsPath)" />
	<Import Condition="Exists('$(M_VcxprojPropsPath)') AND '$(M_ProjectType)'=='Native'" Project="$(M_VcxprojPropsPath)" />
	
	<!-- Figure out what hardware platform we are. This could be some combination of logic I'm not sure about yet, but it's simply the brute platform for now -->
	<PropertyGroup Label="Globals">
		<M_BRUTE_PlatformName Condition="'$(M_BRUTE_PlatformName)' == ''">Proto</M_BRUTE_PlatformName>
		
		<M_PlatformType>$(M_BRUTE_PlatformName)</M_PlatformType>
	</PropertyGroup>

	<!-- Pick project configuration type -->
	<PropertyGroup Label="Globals">
		<!-- WARNING: THIS BLOB OF STUFF HAS TO BE DONE TWICE -->
		<ConfigurationType Condition="'$(M_ProjectType)'=='Bruted'">Application</ConfigurationType>
		<ConfigurationType Condition="'$(M_ProjectType)'=='Native'">StaticLibrary</ConfigurationType>
		<ConfigurationType Condition="'$(M_ProjectType)'=='Native' AND '$(M_BRUTE_PlatformName)'=='Proto'">DynamicLibrary</ConfigurationType>		
	</PropertyGroup>
	
	<PropertyGroup Label="Globals">
		<!-- BRUTE is thoroughly emulating .net which uses unicode, so... -->
		<CharacterSet>Unicode</CharacterSet>
	</PropertyGroup>	
	
	<!-- Setup staging directories, OutDir and IntDir, etc. -->
	<PropertyGroup>
	
		<!-- set build directories and staging dirs -->
		<!-- build directory can go under the brute output -->
		<IntDir>$(SolutionDir).obj\$(MSBuildProjectName) ($(Configuration)-$(Platform))\</IntDir>
		<M_StagingDir>$(SolutionDir)..\</M_StagingDir>
	
		<!-- applications go to a useful location -->
		<OutDir Condition="'$(M_ProjectType)'=='Bruted'">$(M_StagingDir).bin\$(Configuration)\</OutDir>
		<!-- native libraries just go to the IntDir -->
		<!-- however, we want proto native libraries (as theyre DLLs vs+msbuild cant reference+copy well) to go to the output directory -->
		<OutDir Condition="'$(M_ProjectType)'=='Native'">$(IntDir)</OutDir>
		<OutDir Condition="'$(M_ProjectType)'=='Native' AND '$(M_BRUTE_PlatformName)'=='Proto'">$(SolutionDir)bin\$(Configuration)\</OutDir>
		
	</PropertyGroup>
	

</Project>